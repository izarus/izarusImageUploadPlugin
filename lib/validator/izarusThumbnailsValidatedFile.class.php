<?php

/**
 * izarusThumbnailsValidatedFile
 *
 */
class izarusThumbnailsValidatedFile extends sfValidatedFile
{
  protected $thumbnails = array();

  /**
   * Constructor.
   *
   * @param string $originalName  The original file name
   * @param string $type          The file content type
   * @param string $tempName      The absolute temporary path to the file
   * @param int    $size          The file size (in bytes)
   * @param string $path          The path to save the file (optional).
   * @param array  $thumbnails    The thumbnails array
   */
  public function __construct($originalName, $type, $tempName, $size, $path = null, $thumbnails=array())
  {
    $this->originalName = $originalName;
    $this->tempName = $tempName;
    $this->type = $type;
    $this->size = $size;
    $this->path = $path;
    $this->thumbnails = $thumbnails;
  }

  /**
   * Saves the uploaded file.
   *
   * This method can throw exceptions if there is a problem when saving the file.
   *
   * If you don't pass a file name, it will be generated by the generateFilename method.
   * This will only work if you have passed a path when initializing this instance.
   *
   * @param  string $file      The file path to save the file
   * @param  int    $fileMode  The octal mode to use for the new file
   * @param  bool   $create    Indicates that we should make the directory before moving the file
   * @param  int    $dirMode   The octal mode to use when creating the directory
   *
   * @return string The filename without the $this->path prefix
   *
   * @throws Exception
   */
  public function save($file = null, $fileMode = 0666, $create = true, $dirMode = 0777)
  {
    if (is_null($file))
    {
      $file = $this->generateFilename();
    }

    $base_filename = $file;

    if ($file[0] != '/' && $file[0] != '\\' && !(strlen($file) > 3 && ctype_alpha($file[0]) && $file[1] == ':' && ($file[2] == '\\' || $file[2] == '/')))
    {
      if (is_null($this->path))
      {
        throw new RuntimeException('You must give a "path" when you give a relative file name.');
      }
      $file = $this->path.DIRECTORY_SEPARATOR.$file;
    }

    // get our directory path from the destination filename
    $directory = dirname($file);
    if (!is_readable($directory))
    {
      if ($create && !mkdir($directory, $dirMode, true))
      {
        // failed to create the directory
        throw new Exception(sprintf('Failed to create file upload directory "%s".', $directory));
      }

      // chmod the directory since it doesn't seem to work on recursive paths
      chmod($directory, $dirMode);
    }
    if (!is_dir($directory))
    {
      // the directory path exists but it's not a directory
      throw new Exception(sprintf('File upload path "%s" exists, but is not a directory.', $directory));
    }
    if (!is_writable($directory))
    {
      // the directory isn't writable
      throw new Exception(sprintf('File upload path "%s" is not writable.', $directory));
    }

    copy($this->getTempName(), $file);

    chmod($file, $fileMode);

    $this->savedName = $file;

    foreach ($this->thumbnails as $name => $t) {
      $mime = (isset($t['mime']))? $t['mime']:'image/jpeg';
      $option = (isset($t['option']))? $t['option']:'crop';
      $quality = (isset($t['quality']))? $t['quality']:80;

      $thumb = new izarusThumbnail($t['width'], $t['height'],$option);
      $thumb->loadFile($this->getTempName());
      $thumb->save($this->path.DIRECTORY_SEPARATOR.$name.'_'.$base_filename,$mime,$quality);
      chmod($this->path.DIRECTORY_SEPARATOR.$name.'_'.$base_filename, $fileMode);
    }

    return is_null($this->path) ? $file : str_replace($this->path.DIRECTORY_SEPARATOR, '', $file);
  }

}